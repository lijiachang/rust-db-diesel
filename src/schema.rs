// [2m2024-09-02T13:58:11.625006Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m [2mdiesel[0m[2m:[0m Infer schema
// [2m2024-09-02T13:58:11.718132Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_table_names[0m[1m{[0m[3mschema_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Loaded tables [3mtables[0m[2m=[0m[TableName { sql_name: "alembic_version", rust_name: "alembic_version", schema: None }, TableName { sql_name: "fib_entries", rust_name: "fib_entries", schema: None }]
// [2m2024-09-02T13:58:11.727237Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_foreign_key_constraints[0m[1m{[0m[3mschema_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Loaded foreign key constraints [3mct[0m[2m=[0m[]
// [2m2024-09-02T13:58:11.732977Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_table_data[0m[1m{[0m[3mname[0m[2m=[0mTableName { sql_name: "alembic_version", rust_name: "alembic_version", schema: None } [3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mget_primary_keys[0m[1m{[0m[3mtable[0m[2m=[0mTableName { sql_name: "alembic_version", rust_name: "alembic_version", schema: None }[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Load primary keys for table alembic_version [3mprimary_keys[0m[2m=[0m["version_num"]
// [2m2024-09-02T13:58:11.738711Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_table_data[0m[1m{[0m[3mname[0m[2m=[0mTableName { sql_name: "alembic_version", rust_name: "alembic_version", schema: None } [3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Load column information for table alembic_version [3mcolumn_info[0m[2m=[0m[ColumnInformation { column_name: "version_num", type_name: "varchar", type_schema: Some("pg_catalog"), nullable: false, max_length: Some(32), comment: None }]
// [2m2024-09-02T13:58:11.740086Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_table_data[0m[1m{[0m[3mname[0m[2m=[0mTableName { sql_name: "fib_entries", rust_name: "fib_entries", schema: None } [3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mget_primary_keys[0m[1m{[0m[3mtable[0m[2m=[0mTableName { sql_name: "fib_entries", rust_name: "fib_entries", schema: None }[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Load primary keys for table fib_entries [3mprimary_keys[0m[2m=[0m["id"]
// [2m2024-09-02T13:58:11.741592Z[0m [32m INFO[0m [1mrun_infer_schema[0m[1m{[0m[3mmatches[0m[2m=[0mArgMatches { args: FlatMap { keys: ["only-tables", "except-tables", "with-docs", "generate-custom-type-definitions", "schema-key", "sqlite-integer-primary-key-is-bigint", "LOCKED_SCHEMA"], values: [MatchedArg { source: Some(DefaultValue), indices: [1], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [2], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [3], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [4], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [5], type_id: Some(TypeId { t: (12984371808222481388, 2934308495678665783) }), vals: [[AnyValue { inner: TypeId { t: (12984371808222481388, 2934308495678665783) } }]], raw_vals: [["default"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [6], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }, MatchedArg { source: Some(DefaultValue), indices: [7], type_id: Some(TypeId { t: (17600680345725026840, 12968653544477498750) }), vals: [[AnyValue { inner: TypeId { t: (17600680345725026840, 12968653544477498750) } }]], raw_vals: [["false"]], ignore_case: false }] }, subcommand: None }[1m}[0m[2m:[0m[1moutput_schema[0m[1m{[0m[3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m[1mload_table_data[0m[1m{[0m[3mname[0m[2m=[0mTableName { sql_name: "fib_entries", rust_name: "fib_entries", schema: None } [3mconfig[0m[2m=[0mPrintSchema { file: Some("/Users/lijiachang/code/rust/rust-db-diesel/src/schema.rs"), with_docs: NoDocComments, filter: None, column_sorting: OrdinalPosition, schema: None, patch_file: None, import_types: None, generate_missing_sql_type_definitions: None, except_custom_type_definitions: [], custom_type_derives: None, sqlite_integer_primary_key_is_bigint: None }[1m}[0m[2m:[0m [2mdiesel::infer_schema_internals::inference[0m[2m:[0m Load column information for table fib_entries [3mcolumn_info[0m[2m=[0m[ColumnInformation { column_name: "id", type_name: "int4", type_schema: Some("pg_catalog"), nullable: false, max_length: None, comment: None }, ColumnInformation { column_name: "input_number", type_name: "int4", type_schema: Some("pg_catalog"), nullable: true, max_length: None, comment: None }, ColumnInformation { column_name: "calculated_number", type_name: "int4", type_schema: Some("pg_catalog"), nullable: true, max_length: None, comment: None }]
// @generated automatically by Diesel CLI.

diesel::table! {
    alembic_version (version_num) {
        #[max_length = 32]
        version_num -> Varchar,
    }
}

diesel::table! {
    fib_entries (id) {
        id -> Int4,
        input_number -> Nullable<Int4>,
        calculated_number -> Nullable<Int4>,
    }
}

diesel::allow_tables_to_appear_in_same_query!(
    alembic_version,
    fib_entries,
);
